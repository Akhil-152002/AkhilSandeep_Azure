---
- name: Azure AD Automation using Ansible
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    graph_api_url: "https://graph.microsoft.com/v1.0"
    enable_account: "{{ tf | bool }}"
    exmp: "{{ user_id }}"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "PQZ8Q~XSmMsU4dbgk2KyWMHK1h8X7ciD~H.1_csi"
    INCIDENT_NUMBER: "{{ INCIDENT_NUMBER }}"
    service_now_instance: "{{ service_now_instance }}"
    service_now_username: "{{ service_now_username }}"
    service_now_password: "{{ service_now_password }}"
    requested_sys_id: "{{ awx_webhook_payload.sys_id }}"

  tasks:
    - name: Get Access Token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: token_response
      failed_when: token_response.status != 200

    - name: Set access token fact
      set_fact:
        access_token: "{{ token_response.json.access_token }}"
      when: token_response.status == 200

    - name: Debug - Show Access Token Status
      debug:
        msg: "Access Token Retrieval: {{ 'Successful' if token_response.status == 200 else 'Unsuccessful' }}"

    - name: Verify target user exists
      uri:
        url: "{{ graph_api_url }}/users/{{ exmp }}"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
      register: user_verify
      failed_when: false

    - name: Debug - Show user verify result
      debug:
        var: user_verify

    - name: Enable or Disable User Account
      uri:
        url: "{{ graph_api_url }}/users/{{ exmp }}"
        method: PATCH
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        body:
          accountEnabled: "{{ enable_account | lower }}"
        body_format: json
      register: account_update
      failed_when: false

    - name: Debug - Show account update response
      debug:
        var: account_update

    - name: Get Incident Sys_ID from ServiceNow
      uri:
        url: "https://{{ service_now_instance }}/api/now/table/incident?sysparm_query=number={{ INCIDENT_NUMBER }}"
        method: GET
        force_basic_auth: yes
        headers:
          Authorization: "Basic {{ (service_now_username + ':' + service_now_password) | b64encode }}"
          Content-Type: "application/json"
      register: incident_info
      delegate_to: localhost

    - name: Debug - Show ServiceNow Incident Info
      debug:
        var: incident_info.json.result

    - name: Set Incident Sys_ID Fact
      set_fact:
        incident_sys_id: "{{ incident_info.json.result[0].sys_id }}"
      when: incident_info.json.result | length > 0

    - name: Update SNOW Ticket - Issue Resolved
      uri:
        url: "https://{{ service_now_instance }}/api/now/table/incident/{{ incident_sys_id }}"
        method: PATCH
        force_basic_auth: yes
        headers:
          Authorization: "Basic {{ (service_now_username + ':' + service_now_password) | b64encode }}"
          Content-Type: "application/json"
        body_format: json
        body:
          {
            "state": "7",
            "close_code": "Solution Provided",
            "close_notes": "Disk space optimized by stopping a high-consuming process."
          }
        status_code: [200, 201, 403, 405]
      when:
        - issue_resolved | default(false) | bool
        - incident_info.json.result | length > 0
      register: sn_response
      delegate_to: localhost

    - name: Update SNOW Ticket - Manual Escalation
      uri:
        url: "https://{{ service_now_instance }}/api/now/table/incident/{{ incident_sys_id }}"
        method: PATCH
        force_basic_auth: yes
        headers:
          Authorization: "Basic {{ (service_now_username + ':' + service_now_password) | b64encode }}"
          Content-Type: "application/json"
        body_format: json
        body:
          {
            "state": "4",
            "work_notes": "Automation failed. Assigned to manual queue."
          }
        status_code: [200, 405]
      when:
        - incident_info.json.result | length > 0
        - issue_resolved is not defined or not issue_resolved | bool
      register: sn_escalation_response
      delegate_to: localhost

    - name: Update ServiceNow Ticket with Correlation ID
      uri:
        url: "{{ service_now_instance }}/api/now/table/incident/{{ requested_sys_id }}"
        method: PATCH
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
        auth:
          - "{{ service_now_username }}"
          - "{{ service_now_password }}"
        body:
          correlation_id: "true"
        body_format: json
        status_code: [200, 204]
